1.编程题:实现一个“队列”的类，实现先进先出的功能，可以固定队列容量的大小。
如果不理解“队列”的概念，可跳过此题。
要求:
a,每次进出的对象为一个int
b,完整的写清成员变量与公有接口的完整实现。
c,整个程序中，除了基础数据类型(int及其数组)及其包装类(如int的包装类就是
Integer),不可以使用java的其他类，如ArrayList。
下面给出一个队列类的部分定义，以供参考:
public class Queue {
public bool push(int element) ..
public int pop() ..
}
请完成你的程序:
public class Queue {}


2.设计一个 class,来描述我们的地球
要求:
1，定义一系列的成员函数，来描述地球上个各种灾难的发生(地震，海啸。。 )
2,定义一系列的成员变量，来描述地球上的各种实体(五大洲，200个国家。。)
3，地球是唯一的，使用单例模式来封装这个class, 尽量做到线程安全，如果不
理解“单例”的概念，可跳过此要求。

3.编程题:实现一个Key、Value 形式的哈希表class, 类似java里HashMap的功能，实现其中最重要的两个函数。:
a,将一对key, value 记录进哈希表，如key已存在，则覆盖
b,以key来查询，找到key后，返回value
要求:
a, key, value 均为int类型
b,完整的写清哈希表里的成员变量与对外接口的完整实现，尽可能的降低算法复杂度。
c，整个程序中，除了基础数据类型及其包装类(如int的包装类就是Integer), 不可以使用java的其他类，如ArrayList, Map, HashMap。

如果不理解“哈希表”的概念，可跳过此题。
下面给出JDK里HashMap的部分函数声明，以供参考:
public class HashMap<K, V> {
public V get(Object var1)..}
public V put(K var1, V var2) {.}..
请完成你的程序:
public class HashMap{}


2.如何使用两 个队列实现-个栈数据结构(实现伪代码即可)

3.如何实现一个基金抢购系统，即待抢购的基金总金额是固定的，众多投资者进行投资抢购。
提示:
1)类似余额宝的基金抢购案例，考虑系统的高可用、高并发情景
2)描述设计思路，待考虑的核心问题，及对应的解决办法。
3)考虑数据的一致性