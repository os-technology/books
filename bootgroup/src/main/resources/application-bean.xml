<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.3.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.3.xsd"
	default-lazy-init="false">
	<!--<import resource="classpath:/dal/persistence-jpa.xml" />-->
	<context:component-scan base-package="com.boot.group">
		<!--Spring的applicationContext.xml文件中配置扫描包时，不要包含controller的注解-->
		<!--<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>-->
	</context:component-scan>

	<!--列表形式引入配置文件信息-->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<!--1 引入属性文件，在配置中占位使用 -->
				<value>classpath*:app_dev.properties</value>
				<!--<value>file:/opt/demo/config/demo-remote.properties</value>-->
			</list>
		</property>
	</bean>



	<!--2 配置C3P0数据源 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<!--驱动类名 -->
		<property name="driverClass" value="${jdbc.driverClass}" />
		<!-- url -->
		<property name="jdbcUrl" value="${jdbc.url}" />
		<!-- 用户名 -->
		<property name="user" value="${jdbc.username}" />
		<!-- 密码 -->
		<property name="password" value="${jdbc.password}" />
		<!-- 当连接池中的连接耗尽的时候c3p0一次同时获取的连接数  -->
		<property name="acquireIncrement" value="5"></property>
		<!-- 初始连接池大小 -->
		<property name="initialPoolSize" value="10"></property>
		<!-- 连接池中连接最小个数 -->
		<property name="minPoolSize" value="5"></property>
		<!-- 连接池中连接最大个数 -->
		<property name="maxPoolSize" value="20"></property>
	</bean>

	<!-- 数据源配置,使用应用内的DBCP数据库连接池 -->
	<!--<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">-->
		<!--<property name="driverClassName" value="${jdbc.driverClass}"/>-->
		<!--<property name="url" value="${jdbc.url}" />-->
		<!--<property name="username" value="${jdbc.username}" />-->
		<!--<property name="password" value="${jdbc.password}" />-->

		<!--&lt;!&ndash; 配置初始化大小、最小、最大 &ndash;&gt;-->
		<!--<property name="initialSize" value="3" />-->
		<!--<property name="minIdle" value="2" />-->
		<!--<property name="maxActive" value="9" />-->
		<!--&lt;!&ndash; 配置获取连接等待超时的时间 &ndash;&gt;-->
		<!--<property name="maxWait" value="5000" />-->
		<!--&lt;!&ndash; 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 &ndash;&gt;-->
		<!--<property name="timeBetweenEvictionRunsMillis" value="1000" />-->
		<!--&lt;!&ndash; 配置一个连接在池中最小生存的时间，单位是毫秒 &ndash;&gt;-->
		<!--<property name="minEvictableIdleTimeMillis" value="100000" />-->

		<!--<property name="validationQuery" value="SELECT 'x' from dual" />-->
		<!--<property name="testWhileIdle" value="true" />-->
		<!--<property name="testOnBorrow" value="false" />-->
		<!--<property name="testOnReturn" value="false" />-->
	<!--</bean>-->

	<!--5 声明式事务管理 -->
	<!--定义事物管理器，由spring管理事务 -->
	<!--<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">-->
		<!--<property name="dataSource" ref="dataSource"></property>-->
	<!--</bean>-->
	<!-- Jpa 事务管理器  -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory"/>
	</bean>
	<!--&lt;!&ndash; 3. 配置事务管理器 &ndash;&gt;-->
	<!--<Address id="transactionManager"-->
	<!--class="org.springframework.orm.jpa.JpaTransactionManager">-->
	<!--<property name="entityManagerFactory" ref="entityManagerFactory"/>-->
<!--</Address>-->
	<!--支持注解驱动的事务管理，指定事务管理器 -->
	<!--使用基于注解方式配置事务 -->
	<!-- 全注解方式   需加上@Transactional -->
	<tx:annotation-driven transaction-manager="transactionManager"/>
	<!--配置事务增强（如何管理事务，只读、读写...）-->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="*save*" read-only="false"/>
			<tx:method name="get*" read-only="true"/>
		</tx:attributes>
	</tx:advice>
	<!--6 容器自动扫描IOC组件  -->
	<!--<context:component-scan base-package="com.zhangguo.bookstore"></context:component-scan>-->

	<!--7 aspectj支持自动代理实现AOP功能 -->
	<aop:aspectj-autoproxy proxy-target-class="true"></aop:aspectj-autoproxy>
	<import resource="classpath*:spring-jpa.xml"/>
</beans>